"use strict";(self.webpackChunkcourier=self.webpackChunkcourier||[]).push([[777],{3905:function(e,t,r){r.d(t,{Zo:function(){return f},kt:function(){return g}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},f=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,f=s(e,["components","mdxType","originalType","parentName"]),p=l(r),g=o,d=p["".concat(c,".").concat(g)]||p[g]||u[g]||a;return r?n.createElement(d,i(i({ref:t},f),{},{components:r})):n.createElement(d,i({ref:t},f))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},2619:function(e,t,r){r.r(t),r.d(t,{assets:function(){return f},contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],s={},c=void 0,l={unversionedId:"sdk/xds/bootstrap",id:"sdk/xds/bootstrap",title:"bootstrap",description:"Package bootstrap provides bootstrap config loading capabilities to xds client",source:"@site/docs/sdk/xds/bootstrap.md",sourceDirName:"sdk/xds",slug:"/sdk/xds/bootstrap",permalink:"/courier-go/docs/sdk/xds/bootstrap",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sdk/xds/bootstrap.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"backoff",permalink:"/courier-go/docs/sdk/xds/backoff"},next:{title:"log",permalink:"/courier-go/docs/sdk/xds/log"}},f={},u=[{value:"Index",id:"index",level:2},{value:"type Config",id:"type-config",level:2},{value:"func NewConfig",id:"func-newconfig",level:3},{value:"func NewConfigFromContents",id:"func-newconfigfromcontents",level:3},{value:"type ServerConfig",id:"type-serverconfig",level:2},{value:"func (ServerConfig) MarshalJSON",id:"func-serverconfig-marshaljson",level:3},{value:"func (*ServerConfig) String",id:"func-serverconfig-string",level:3},{value:"func (*ServerConfig) UnmarshalJSON",id:"func-serverconfig-unmarshaljson",level:3}],p={toc:u};function g(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"bootstrap"},"bootstrap"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'import "github.com/gojek/courier-go/xds/bootstrap"\n')),(0,a.kt)("p",null,"Package bootstrap provides bootstrap config loading capabilities to xds client"),(0,a.kt)("h2",{id:"index"},"Index"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#type-config"},"type Config"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#func-newconfig"},"func NewConfig() (*Config, error)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#func-newconfigfromcontents"},"func NewConfigFromContents(data []byte) (*Config, error)")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#type-serverconfig"},"type ServerConfig"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#func-serverconfig-marshaljson"},"func (sc ServerConfig) MarshalJSON() ([]byte, error)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#func-serverconfig-string"},"func (sc *ServerConfig) String() string")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#func-serverconfig-unmarshaljson"},"func (sc *ServerConfig) UnmarshalJSON(data []byte) error"))))),(0,a.kt)("h2",{id:"type-config"},"type ",(0,a.kt)("a",{parentName:"h2",href:"https://github.com/gojek/courier-go/blob/main/xds/bootstrap/bootstrap.go#L55-L58"},"Config")),(0,a.kt)("p",null,"Config provides the xDS client with several key bits of information that it requires in its interaction with the management server. The Config is initialized from the bootstrap file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'type Config struct {\n    // XDSServer is the management server to connect to.\n    XDSServer *ServerConfig `json:"xds_server"`\n}\n')),(0,a.kt)("h3",{id:"func-newconfig"},"func ",(0,a.kt)("a",{parentName:"h3",href:"https://github.com/gojek/courier-go/blob/main/xds/bootstrap/bootstrap.go#L63"},"NewConfig")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func NewConfig() (*Config, error)\n")),(0,a.kt)("p",null,"NewConfig returns a bootstrap config after reading the BootstrapConfig from the file specified by COURIER","_","XDS","_","BOOTSTRAP env var or the base64 encoded string in COURIER","_","XDS","_","BOOTSTRAP","_","CONFIG","_","BASE64 var."),(0,a.kt)("h3",{id:"func-newconfigfromcontents"},"func ",(0,a.kt)("a",{parentName:"h3",href:"https://github.com/gojek/courier-go/blob/main/xds/bootstrap/bootstrap.go#L73"},"NewConfigFromContents")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func NewConfigFromContents(data []byte) (*Config, error)\n")),(0,a.kt)("p",null,"NewConfigFromContents returns a bootstrap config after reading the BootstrapConfig from data."),(0,a.kt)("h2",{id:"type-serverconfig"},"type ",(0,a.kt)("a",{parentName:"h2",href:"https://github.com/gojek/courier-go/blob/main/xds/bootstrap/bootstrap.go#L95-L108"},"ServerConfig")),(0,a.kt)("p",null,"ServerConfig contains the configuration to connect to a server, including URI, creds, and transport API version ","(","e.g. v2 or v3",")","."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'type ServerConfig struct {\n    // ServerURI is the management server to connect to.\n    //\n    // The bootstrap file contains an ordered list of xDS servers to contact for\n    // this authority. The first one is picked.\n    ServerURI string `json:"server_uri"`\n    // NodeProto contains the Node proto to be used in xDS requests. The actual\n    // type depends on the transport protocol version used.\n    //\n    // Note that it\'s specified in the bootstrap globally for all the servers,\n    // but we keep it in each server config so that its type (e.g. *v3pb.Node)\n    // is consistent with the transport API version.\n    NodeProto proto.Message\n}\n')),(0,a.kt)("h3",{id:"func-serverconfig-marshaljson"},"func ","(","ServerConfig",")"," ",(0,a.kt)("a",{parentName:"h3",href:"https://github.com/gojek/courier-go/blob/main/xds/bootstrap/bootstrap.go#L124"},"MarshalJSON")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (sc ServerConfig) MarshalJSON() ([]byte, error)\n")),(0,a.kt)("p",null,"MarshalJSON marshals the ServerConfig to json."),(0,a.kt)("h3",{id:"func-serverconfig-string"},"func ","(","*","ServerConfig",")"," ",(0,a.kt)("a",{parentName:"h3",href:"https://github.com/gojek/courier-go/blob/main/xds/bootstrap/bootstrap.go#L119"},"String")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (sc *ServerConfig) String() string\n")),(0,a.kt)("p",null,"String returns the string representation of the ServerConfig."),(0,a.kt)("p",null,"This string representation will be used as map keys in federation ","(","`","map","[","ServerConfig","]","authority","`",")",", so that the xDS ClientConn and stream will be shared by authorities with different names but the same server config."),(0,a.kt)("p",null,"It covers ","(","almost",")"," all the fields so the string can represent the config content. It doesn't cover NodeProto because NodeProto isn't used by federation."),(0,a.kt)("h3",{id:"func-serverconfig-unmarshaljson"},"func ","(","*","ServerConfig",")"," ",(0,a.kt)("a",{parentName:"h3",href:"https://github.com/gojek/courier-go/blob/main/xds/bootstrap/bootstrap.go#L135"},"UnmarshalJSON")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func (sc *ServerConfig) UnmarshalJSON(data []byte) error\n")),(0,a.kt)("p",null,"UnmarshalJSON takes the json data ","(","a server",")"," and unmarshals it to the struct."),(0,a.kt)("p",null,"Generated by ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/princjef/gomarkdoc"},"gomarkdoc")))}g.isMDXComponent=!0}}]);