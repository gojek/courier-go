"use strict";(self.webpackChunkcourier=self.webpackChunkcourier||[]).push([[688],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(n),f=a,m=d["".concat(i,".").concat(f)]||d[f]||p[f]||o;return n?r.createElement(m,l(l({ref:t},u),{},{components:n})):r.createElement(m,l({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,l[1]=c;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6205:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return i},default:function(){return f},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return p}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),l=["components"],c={},i=void 0,s={unversionedId:"sdk/xds/xDS",id:"sdk/xds/xDS",title:"xDS",description:"Package xds contains the client that can be used to interact with the management server to receive address updates for subscribed clusters",source:"@site/docs/sdk/xds/xDS.md",sourceDirName:"sdk/xds",slug:"/sdk/xds/",permalink:"/courier-go/docs/sdk/xds/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sdk/xds/xDS.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"otelcourier",permalink:"/courier-go/docs/sdk/otelcourier"},next:{title:"backoff",permalink:"/courier-go/docs/sdk/xds/backoff"}},u={},p=[{value:"Index",id:"index",level:2},{value:"type Client",id:"type-client",level:2},{value:"func NewClient",id:"func-newclient",level:3},{value:"func (*Client) Done",id:"func-client-done",level:3},{value:"func (*Client) Receive",id:"func-client-receive",level:3},{value:"func (*Client) Start",id:"func-client-start",level:3},{value:"type Options",id:"type-options",level:2},{value:"type Resolver",id:"type-resolver",level:2},{value:"func NewResolver",id:"func-newresolver",level:3},{value:"func (*Resolver) Done",id:"func-resolver-done",level:3},{value:"func (*Resolver) UpdateChan",id:"func-resolver-updatechan",level:3}],d={toc:p};function f(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"xds"},"xds"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'import "github.com/gojek/courier-go/xds"\n')),(0,o.kt)("p",null,"Package xds contains the client that can be used to interact with the management server to receive address updates for subscribed clusters"),(0,o.kt)("h2",{id:"index"},"Index"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-client"},"type Client"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-newclient"},"func NewClient(opts Options) *Client")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-client-done"},"func (c *Client) Done() <-chan struct{}")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-client-receive"},"func (c ",(0,o.kt)("em",{parentName:"a"},"Client) Receive() <-chan []"),"v3endpointpb.ClusterLoadAssignment")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-client-start"},"func (c *Client) Start(ctx context.Context) error")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-options"},"type Options")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#type-resolver"},"type Resolver"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-newresolver"},"func NewResolver(rc clusterUpdateReceiver) *Resolver")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-resolver-done"},"func (r *Resolver) Done() <-chan struct{}")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#func-resolver-updatechan"},"func (r *Resolver) UpdateChan() <-chan []courier.TCPAddress"))))),(0,o.kt)("h2",{id:"type-client"},"type ",(0,o.kt)("a",{parentName:"h2",href:"https://github.com/gojek/courier-go/blob/main/xds/client.go#L69-L80"},"Client")),(0,o.kt)("p",null,"Client performs the actual ADS RPCs using the ADS v3 API","."," It creates an ADS stream on which the xdsTarget resources are received","."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type Client struct {\n    // contains filtered or unexported fields\n}\n")),(0,o.kt)("h3",{id:"func-newclient"},"func ",(0,o.kt)("a",{parentName:"h3",href:"https://github.com/gojek/courier-go/blob/main/xds/client.go#L40"},"NewClient")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func NewClient(opts Options) *Client\n")),(0,o.kt)("p",null,"NewClient returns a new ADS client stream using the ","*","grpc",".","ClientConn provided","."),(0,o.kt)("h3",{id:"func-client-done"},"func ","(","*","Client",")"," ",(0,o.kt)("a",{parentName:"h3",href:"https://github.com/gojek/courier-go/blob/main/xds/client.go#L88"},"Done")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (c *Client) Done() <-chan struct{}\n")),(0,o.kt)("p",null,"Done returns a channel which is closed when the run loop stops due to context expiry"),(0,o.kt)("h3",{id:"func-client-receive"},"func ","(","*","Client",")"," ",(0,o.kt)("a",{parentName:"h3",href:"https://github.com/gojek/courier-go/blob/main/xds/client.go#L83"},"Receive")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (c *Client) Receive() <-chan []*v3endpointpb.ClusterLoadAssignment\n")),(0,o.kt)("p",null,"Receive returns a channel where ClusterLoadAssignment resource updates can be received"),(0,o.kt)("h3",{id:"func-client-start"},"func ","(","*","Client",")"," ",(0,o.kt)("a",{parentName:"h3",href:"https://github.com/gojek/courier-go/blob/main/xds/client.go#L93"},"Start")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (c *Client) Start(ctx context.Context) error\n")),(0,o.kt)("p",null,"Start will wait updates from control plane\\, it is non","-","blocking"),(0,o.kt)("h2",{id:"type-options"},"type ",(0,o.kt)("a",{parentName:"h2",href:"https://github.com/gojek/courier-go/blob/main/xds/client.go#L31-L37"},"Options")),(0,o.kt)("p",null,"Options specifies options to be provided for initialising the xds client"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type Options struct {\n    XDSTarget       string\n    NodeProto       *v3corepb.Node\n    ClientConn      grpc.ClientConnInterface\n    BackoffStrategy backoff.Strategy\n    Logger          log.Logger\n}\n")),(0,o.kt)("h2",{id:"type-resolver"},"type ",(0,o.kt)("a",{parentName:"h2",href:"https://github.com/gojek/courier-go/blob/main/xds/resolver.go#L17-L20"},"Resolver")),(0,o.kt)("p",null,"Resolver sends updates to via the channel returned by UpdateChan","(",")"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type Resolver struct {\n    // contains filtered or unexported fields\n}\n")),(0,o.kt)("h3",{id:"func-newresolver"},"func ",(0,o.kt)("a",{parentName:"h3",href:"https://github.com/gojek/courier-go/blob/main/xds/resolver.go#L23"},"NewResolver")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func NewResolver(rc clusterUpdateReceiver) *Resolver\n")),(0,o.kt)("p",null,"NewResolver returns a ","*","Resolver that uses rc to receive cluster updates"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Example"),(0,o.kt)("p",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'{\n    cfg, err := bootstrap.NewConfigFromContents([]byte(`{\n "xds_server": {\n   "server_uri": "localhost:9100",\n   "node": {\n     "id": "52fdfc07-2182-454f-963f-5f0f9a621d72",\n     "cluster": "cluster",\n     "metadata": {\n       "TRAFFICDIRECTOR_GCP_PROJECT_NUMBER": "123456789012345",\n       "TRAFFICDIRECTOR_NETWORK_NAME": "thedefault"\n     },\n     "locality": {\n       "zone": "uscentral-5"\n     }\n   }\n }\n}`,\n    ))\n    if err != nil {\n        panic(err)\n    }\n\n    ctx, _ := signal.NotifyContext(context.Background(), os.Kill, os.Interrupt)\n\n    cc, err := grpc.DialContext(ctx, cfg.XDSServer.ServerURI, grpc.WithTransportCredentials(insecure.NewCredentials()))\n    if err != nil {\n        panic(err)\n    }\n\n    xdsClient := xds.NewClient(xds.Options{\n        XDSTarget:       "xds:///broker.domain",\n        NodeProto:       cfg.XDSServer.NodeProto.(*corev3.Node),\n        ClientConn:      cc,\n        BackoffStrategy: &backoff.DefaultExponential,\n    })\n\n    if err := xdsClient.Start(ctx); err != nil {\n        panic(err)\n    }\n\n    r := xds.NewResolver(xdsClient)\n\n    c, err := courier.NewClient(courier.WithResolver(r))\n    if err != nil {\n        panic(err)\n    }\n\n    if err := c.Start(); err != nil {\n        panic(err)\n    }\n\n    <-ctx.Done()\n}\n')))),(0,o.kt)("h3",{id:"func-resolver-done"},"func ","(","*","Resolver",")"," ",(0,o.kt)("a",{parentName:"h3",href:"https://github.com/gojek/courier-go/blob/main/xds/resolver.go#L40"},"Done")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (r *Resolver) Done() <-chan struct{}\n")),(0,o.kt)("p",null,"Done returns a channel which is closed when the underlying clusterUpdateReceiver is marked as done"),(0,o.kt)("h3",{id:"func-resolver-updatechan"},"func ","(","*","Resolver",")"," ",(0,o.kt)("a",{parentName:"h3",href:"https://github.com/gojek/courier-go/blob/main/xds/resolver.go#L35"},"UpdateChan")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (r *Resolver) UpdateChan() <-chan []courier.TCPAddress\n")),(0,o.kt)("p",null,"UpdateChan returns a channel where ","[","]","courier",".","TCPAddress can be received"),(0,o.kt)("p",null,"Generated by ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/princjef/gomarkdoc"},"gomarkdoc")))}f.isMDXComponent=!0}}]);